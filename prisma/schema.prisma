generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  exercises Exercise[]
  workouts  Workout[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  userId      String
  muscleGroup String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises  WorkoutExercise[]
  templateExercises TemplateExercise[]
}

model Workout {
  id       String   @id @default(cuid())
  name     String
  date     DateTime
  userId   String
  duration Int?
  kcal     Int?

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
}

model WorkoutSet {
  id                String @id @default(cuid())
  reps              Int
  weight            Float
  unit              String
  workoutExerciseId String

  workoutExercise WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
}

model WorkoutExercise {
  id         String @id @default(cuid())
  index      Int
  exerciseId String
  workoutId  String

  exercise    Exercise     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout     Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutSets WorkoutSet[]
}

model WorkoutTemplate {
  id   String @id @default(cuid())
  name String

  templateExercises TemplateExercise[]
}

model TemplateExercise {
  id                String @id @default(cuid())
  exerciseId        String
  workoutTemplateId String

  exercise        Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutTemplate WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
}
